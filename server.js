// Generated by CoffeeScript 1.3.3
var DEFAULT_PUBLIC_FOLDER_PATH, DEFAULT_SERVER_PORT, fileServer, http, httpServer, io, nodeStatic, socketIO, socketToToken, tokenToPlayerSockets;

DEFAULT_PUBLIC_FOLDER_PATH = "./public";

DEFAULT_SERVER_PORT = 8000;

http = require("http");

nodeStatic = require("node-static");

socketIO = require("socket.io");

tokenToPlayerSockets = {};

socketToToken = {};

fileServer = new nodeStatic.Server(DEFAULT_PUBLIC_FOLDER_PATH, {
  cache: false
});

httpServer = http.createServer(function(request, response) {
  request.addListener("data", function() {});
  return request.addListener("end", function() {
    return fileServer.serve(request, response);
  });
});

io = socketIO.listen(httpServer);

io.sockets.on('connection', function(socket) {
  socket.on("serverTime", function(clientTime, callback) {
    console.log("socketEvent: serverTime");
    return callback(new Date().getTime());
  });
  socket.on('joinRoom', function(token) {
    console.log("socketEvent: joinRoom, token: " + token);
    socket.join(token);
    return socket.emit('message', 'joining: ' + token);
  });
  socket.on('newPlayer', function(token, callback) {
    var existingSocketId, foundSpace, index, playerId, _i, _len, _ref, _ref1;
    console.log("socketEvent: newPlayer, token: " + token);
    if ((_ref = tokenToPlayerSockets[token]) == null) {
      tokenToPlayerSockets[token] = [null, null];
    }
    foundSpace = false;
    _ref1 = tokenToPlayerSockets[token];
    for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
      existingSocketId = _ref1[index];
      if (!(existingSocketId != null)) {
        playerId = index;
        tokenToPlayerSockets[token][playerId] = socket.id;
        socketToToken[socket.id] = token;
        callback(playerId);
        socket.emit('message', "welcome, player " + playerId);
        foundSpace = true;
        break;
      }
    }
    if (!foundSpace) {
      return socket.emit('message', "too many players");
    }
  });
  socket.on('swing', function(swing) {
    console.log("socketEvent: swing, swing: " + swing);
    return io.sockets["in"](socketToToken[socket.id]).emit('swing', swing);
  });
  return socket.on('disconnect', function() {
    var i, token, _i, _ref;
    console.log("socketEvent: disconnect");
    token = socketToToken[socket.id];
    if (token != null) {
      for (i = _i = 0, _ref = tokenToPlayerSockets[token].length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (tokenToPlayerSockets[token][i] === socket.id) {
          tokenToPlayerSockets[token][i] = null;
        }
      }
      return delete socketToToken[socket.id];
    }
  });
});

httpServer.listen(DEFAULT_SERVER_PORT);

console.log('Server running at port: ' + DEFAULT_SERVER_PORT);
