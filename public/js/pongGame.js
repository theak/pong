// Generated by CoffeeScript 1.3.3
var Action, Ball, Extrapolate, Location, PongRound, PongState, Speed, Swing, pongRound, renderingInterval,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PongState = (function() {

  function PongState(timestamp, ball) {
    this.timestamp = timestamp;
    this.ball = ball;
  }

  return PongState;

})();

Ball = (function() {

  function Ball(location, speed) {
    this.location = location;
    this.speed = speed;
  }

  return Ball;

})();

Location = (function() {

  function Location(x, y) {
    this.x = x;
    this.y = y;
  }

  return Location;

})();

Speed = (function() {

  function Speed(x, y) {
    this.x = x;
    this.y = y;
  }

  return Speed;

})();

Action = (function() {

  function Action(timestamp) {
    this.timestamp = timestamp;
  }

  Action.prototype.actOn = function(state) {};

  return Action;

})();

Extrapolate = (function(_super) {

  __extends(Extrapolate, _super);

  function Extrapolate() {
    return Extrapolate.__super__.constructor.apply(this, arguments);
  }

  Extrapolate.prototype.actOn = function(state) {
    var extrapolatedLocation, timeGap;
    timeGap = this.timestamp - state.timestamp;
    extrapolatedLocation = new Location(state.ball.location.x + (timeGap * state.ball.speed.x), state.ball.location.y + (timeGap * state.ball.speed.y));
    return new PongState(this.timestamp, new Ball(extrapolatedLocation, new Speed(state.ball.speed.x, state.ball.speed.y)));
  };

  return Extrapolate;

})(Action);

Swing = (function(_super) {

  __extends(Swing, _super);

  function Swing(timestamp, playerID, side, speed) {
    this.playerID = playerID;
    this.side = side;
    this.speed = speed;
    Swing.__super__.constructor.call(this, timestamp);
  }

  Swing.prototype.actOn = function(state) {
    var extrapolatedState;
    extrapolatedState = new Extrapolate(this.timestamp).actOn(state);
    extrapolatedState.ball.speed.x *= -1;
    extrapolatedState.ball.speed.y *= -1;
    if (extrapolatedState.ball.speed.x === 0) {
      extrapolatedState.ball.speed.x = 0.1;
    }
    return extrapolatedState;
  };

  return Swing;

})(Action);

PongRound = (function() {
  var actions, cachedStates;

  actions = [];

  cachedStates = [];

  function PongRound(startState) {
    this.startState = startState;
  }

  PongRound.prototype.addAction = function(newAction) {
    var newActionIndex;
    actions.push(newAction);
    actions.sort(function(a, b) {
      return a.timestamp - b.timestamp;
    });
    newActionIndex = actions.indexOf(newAction);
    return cachedStates = cachedStates.slice(0, newActionIndex);
  };

  PongRound.prototype.getStateAtTime = function(timestamp) {
    var actionIndex, mostRecentCachedIndex, mostRecentCachedState, mostRecentIndex, mostRecentState, nextAction, nextState, _i, _ref;
    mostRecentIndex = -1;
    for (actionIndex = _i = _ref = actions.length - 1; _ref <= -1 ? _i < -1 : _i > -1; actionIndex = _ref <= -1 ? ++_i : --_i) {
      if (actions[actionIndex].timestamp <= timestamp) {
        mostRecentIndex = actionIndex;
        break;
      }
    }
    mostRecentCachedIndex = Math.min(cachedStates.length - 1, mostRecentIndex);
    while (mostRecentCachedIndex < mostRecentIndex) {
      mostRecentCachedState = mostRecentCachedIndex >= 0 ? cachedStates[mostRecentCachedIndex] : this.startState;
      nextAction = actions[mostRecentCachedIndex + 1];
      nextState = nextAction.actOn(mostRecentCachedState);
      cachedStates[mostRecentCachedIndex + 1] = nextState;
      mostRecentCachedIndex += 1;
    }
    mostRecentState = mostRecentCachedIndex >= 0 ? cachedStates[mostRecentIndex] : this.startState;
    return new Extrapolate(timestamp).actOn(mostRecentState);
  };

  return PongRound;

})();

pongRound = new PongRound(new PongState(new Date().valueOf(), new Ball(new Location(0, 0), new Speed(0, 0))));

window.onkeypress = function(event) {
  if (event.keyCode === 32) {
    return pongRound.addAction(new Swing(new Date().valueOf(), null, null, null));
  }
};

renderingInterval = setInterval(function() {
  var endTime, startTime, x, y, _ref;
  startTime = new Date().valueOf();
  _ref = (pongRound.getStateAtTime(new Date().valueOf())).ball.location, x = _ref.x, y = _ref.y;
  document.body.innerHTML = "<div style='width: 10px; height: 10px; background: blue; position: absolute; left: " + x + "px; top: " + y + "px;'></div>";
  endTime = new Date().valueOf();
  return console.log("rendering took: " + (endTime - startTime) + " milliseconds");
}, 10);

window.stop = function() {
  return clearInterval(renderingInterval);
};
