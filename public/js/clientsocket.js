// Generated by CoffeeScript 1.6.2
var SwingMessage, SwingReceiver, Swinger, getTokenFromUrl, socket, token;

socket = io.connect("/");

getTokenFromUrl = function() {
  if (window.location.href.indexOf("#") === -1) {
    alert("please specify a token");
    return false;
  } else {
    return window.location.href.split("#")[1];
  }
};

token = getTokenFromUrl();

SwingMessage = (function() {
  function SwingMessage(playerId, timestamp, token) {
    this.playerId = playerId;
    this.timestamp = timestamp;
    this.token = token;
  }

  return SwingMessage;

})();

if (token) {
  socket.on("connect", function() {
    return socket.emit('token', token);
  });
  socket.on("message", function(data) {
    if (data !== null && typeof data === "object" && (SwingReceiver.singleton != null)) {
      return SwingReceiver.singleton.send(data);
    } else {
      return console.log(data);
    }
  });
  socket.on("playerId", function(id, delta) {
    Swinger.singleton.playerId = id;
    return Swinger.singleton.delta = delta;
  });
}

Swinger = (function() {
  Swinger.prototype.singleton = null;

  function Swinger(token) {
    this.token = token;
    Swinger.singleton = this;
    socket.emit("newplayer", this.token, new Date().getTime());
    console.log("new swinger!");
  }

  Swinger.prototype.swing = function() {
    if ((this.playerId != null) && (this.delta != null)) {
      return socket.emit("swing", new SwingMessage(this.playerId, new Date().getTime() + this.delta, this.token));
    }
  };

  return Swinger;

})();

SwingReceiver = (function() {
  SwingReceiver.prototype.singleton = null;

  function SwingReceiver(callback) {
    this.callback = callback;
    SwingReceiver.singleton = this;
  }

  SwingReceiver.prototype.send = function(swing) {
    return this.callback(swing);
  };

  return SwingReceiver;

})();
