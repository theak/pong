// Generated by CoffeeScript 1.3.3
var clientSocket;

clientSocket = (function() {
  var SwingMessage, playerId, socket, timeDelta, token,
    _this = this;
  socket = io.connect("/");
  timeDelta = null;
  playerId = null;
  token = window.location.hash.slice(1);
  if (token.length === 0) {
    token = makeToken();
    window.location.hash = token;
  }
  SwingMessage = (function() {

    function SwingMessage(playerId, timestamp, token) {
      this.playerId = playerId;
      this.timestamp = timestamp;
      this.token = token;
    }

    return SwingMessage;

  })();
  socket.on("connect", function() {
    socket.emit("getServerTime", new Date().getTime());
    return socket.emit('joinRoom', token);
  });
  socket.on("swing", function(swingMessage) {
    swingMessage.timestamp -= timeDelta;
    if (clientSocket.onswing != null) {
      return clientSocket.onswing(swingMessage);
    }
  });
  socket.on("message", function(data) {
    return console.log(data);
  });
  socket.on("playerId", function(id) {
    return playerId = id;
  });
  socket.on("serverTime", function(serverTime, originalRequestTime) {
    var currentTime, oneWayLatency;
    currentTime = new Date().getTime();
    oneWayLatency = (originalRequestTime - currentTime) / 2;
    return timeDelta = serverTime - originalRequestTime - oneWayLatency;
  });
  return {
    join: function() {
      return socket.emit("newPlayer", token);
    },
    swing: function() {
      if ((playerId != null) && (timeDelta != null)) {
        return socket.emit("swing", new SwingMessage(playerId, new Date().getTime() + timeDelta));
      }
    },
    onswing: function() {},
    getToken: function() {
      return token;
    }
  };
})();
